options {
    STATIC = false;
}

PARSER_BEGIN(Parser)
package org.odve.parser;

import org.odve.lang.libraries.order.Order;
import org.odve.model.*;

import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;

import static java.util.Collections.emptyList;

public class Parser {
    public Parser() {
    }

    public GameRules parse(InputStream io) throws ParseException, TokenMgrError {
        Parser parser = new Parser(io);
        return parser.rules();
    }
}
PARSER_END(Parser)

// -- Tokens --

SKIP:  { " " | "\t" | "\n" | "\r"}

SKIP :
{
  "/*" : WithinComment
}

<WithinComment> SKIP :
{
  "*/" : DEFAULT
}

<WithinComment> MORE :
{
  <~[]>
}

TOKEN: {
    <GAME : "game"> |
    <PLAYERS : "players"> |
    <ORDER : "order">
}

TOKEN: {<EOL : ";">}

TOKEN: {
    <LPAREN: "("> |
    <RPAREN: ")"> |
    <LBRACE: "{"> |
    <RBRACE: "}"> |
    <LBRACKET: "["> |
    <RBRACKET: "]"> |
    <COLON: ":"> |
    <DOT: "."> |
    <COMMA: ","> |
    <PLUS: "+"> |
    <MINUS: "-">
}

TOKEN: {
    <NUMBER: (<MINUS>)? ( <DIGITS> ) > |
    <DIGITS: ( <DIGIT> )+ > |
    <ID: <LETTER> (<LETTER> | <DIGIT> | "_")*> |
    <#LETTER: ["A"-"Z", "a"-"z"]> |
    <#DIGIT: ["0"-"9"]>
}

// -- Types --

String id(): {
    Token value;
}
{
    value = <ID> {return value.image;}
}

Integer num(): {
    Token value;
}
{
    value = <NUMBER> {return Integer.valueOf(value.image);}
}

List<String> list(): {
    List<String> values = new ArrayList<String>();
    String value;
}
{
    value = id() {values.add(value);}
    (<COMMA> value = id() {values.add(value);})*
    {return values;}
}

List<String> params(): {
    List<String> values = emptyList();
}
{
    <LPAREN> (values = list())? <RPAREN> {return values;}
}

// -- Rules --

GameRules rules(): {
    GameRules.GameRulesBuilder builder = GameRules.builder();
} {
    name(builder) <EOL>
    players(builder) <EOL>
    order(builder) <EOL>

    <EOF> {return builder.build();}
}

void name(GameRules.GameRulesBuilder builder): {
    String name;
} {
    <GAME> name = id() {builder.name(name);}
}

void players(GameRules.GameRulesBuilder builder): {
    List<String> values = new ArrayList<String>();
} {
    <PLAYERS> values = list()
    {
        List<Player> players = new ArrayList<Player>();
        for (String v : values) {
            players.add(new Player(v));
        }
        builder.players(players);
    }
}

void order(GameRules.GameRulesBuilder builder) : {
    String orderName;
    List<String> params;
}
{
    <ORDER> orderName = id() params = params()
    {
        builder.order(Order.createOrder(orderName, params));
    }
}